/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    blocker: THREE.Mesh;
    map_4osm_buildings001: THREE.Mesh;
    map_4osm_buildings001_1: THREE.Mesh;
    Circle: THREE.Mesh;
    map_4osm_buildings002: THREE.Mesh;
    map_4osm_buildings002_1: THREE.Mesh;
    map_4osm_buildings003: THREE.Mesh;
    map_4osm_buildings003_1: THREE.Mesh;
    map_4osm_buildings004: THREE.Mesh;
    map_4osm_buildings004_1: THREE.Mesh;
    map_4osm_buildings005: THREE.Mesh;
    map_4osm_buildings005_1: THREE.Mesh;
    map_4osm_buildings006: THREE.Mesh;
    map_4osm_buildings006_1: THREE.Mesh;
    map_4osm_buildings007: THREE.Mesh;
    map_4osm_buildings007_1: THREE.Mesh;
    building_8: THREE.Mesh;
    map_4osm_buildings009: THREE.Mesh;
    map_4osm_buildings009_1: THREE.Mesh;
    map_4osm_buildings015: THREE.Mesh;
    map_4osm_buildings015_1: THREE.Mesh;
    map_4osm_buildings015_2: THREE.Mesh;
    map_4osm_buildings018: THREE.Mesh;
    map_4osm_buildings018_1: THREE.Mesh;
    map_4osm_buildings090: THREE.Mesh;
    map_4osm_buildings090_1: THREE.Mesh;
    map_4osm_buildings097: THREE.Mesh;
    map_4osm_buildings097_1: THREE.Mesh;
    rooflight_stand: THREE.Mesh;
    Sphere: THREE.Mesh;
  };
  materials: {
    blocker: THREE.MeshStandardMaterial;
    wall1: THREE.MeshStandardMaterial;
    roof: THREE.MeshStandardMaterial;
    ["wall abandoned"]: THREE.MeshStandardMaterial;
    ["wall indust"]: THREE.MeshStandardMaterial;
    ["Warehouse Facade"]: THREE.MeshStandardMaterial;
    ["PBR building in night"]: THREE.MeshStandardMaterial;
    ["big light"]: THREE.MeshStandardMaterial;
    ["PBR old building 2"]: THREE.MeshPhysicalMaterial;
    ["Building 4"]: THREE.MeshStandardMaterial;
    wall: THREE.MeshStandardMaterial;
    ["red light"]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF(process.env.PUBLIC_URL + "/cityscape.glb") as GLTFResult;

  for (const key in materials) {
    if (Object.prototype.hasOwnProperty.call(materials, key)) {
      const material = materials[key as keyof typeof materials];
      if (material.map){
        material.map.channel = 0;
      }
      material.transparent = true;
      material.opacity = 1;
    }
  }


  return (
    <group {...props} dispose={null}>
      <group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.blocker.geometry}
          material={materials.blocker}
          scale={[68.165, 107.266, 68.165]}
        />
        <group position={[19.034, 15.648, -33.438]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings001.geometry}
            material={materials.wall1}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings001_1.geometry}
            material={materials.roof}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Circle.geometry}
            material={materials.wall1}
            position={[-0.521, -0.931, 15.384]}
          />
        </group>
        <group position={[38.01, 13.346, -5.261]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings002.geometry}
            material={materials["wall abandoned"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings002_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[44.663, 14.264, -22.941]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings003.geometry}
            material={materials["wall indust"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings003_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[44.123, 12.096, 10.98]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings004.geometry}
            material={materials["wall abandoned"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings004_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[43.434, 11.399, 17.998]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings005.geometry}
            material={materials["wall indust"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings005_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[45.978, 11.413, 23.328]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings006.geometry}
            material={materials["wall indust"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings006_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[-8.798, 32.932, -32.684]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings007.geometry}
            material={materials["Warehouse Facade"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings007_1.geometry}
            material={materials.roof}
          />
        </group>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.building_8.geometry}
          material={materials.wall1}
          position={[17.967, 15.431, 29.5]}
          rotation={[0, -0.19, 0]}
        />
        <group position={[4.343, 12.303, 29.822]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings009.geometry}
            material={materials["wall abandoned"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings009_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[189.755, 103.263, -105.582]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings015.geometry}
            material={materials["PBR building in night"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings015_1.geometry}
            material={materials.roof}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings015_2.geometry}
            material={materials["big light"]}
          />
        </group>
        <group position={[132.664, 83.932, -57.824]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings018.geometry}
            material={materials["PBR old building 2"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings018_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[73.314, 39.595, 24.372]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings090.geometry}
            material={materials["Building 4"]}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings090_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[94.481, 21.451, -46.889]} rotation={[0, -0.19, 0]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings097.geometry}
            material={materials.wall}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.map_4osm_buildings097_1.geometry}
            material={materials.roof}
          />
        </group>
        <group position={[15.591, 14.037, -18.353]} rotation={[0, -0.19, 0]} />
      </group>
    </group>
  );
}

export function TowerLight(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null!);
  const { nodes, materials } = useGLTF(process.env.PUBLIC_URL + "/cityscape.glb") as GLTFResult;

  // useMemo(() => {
  //   nodes.Sphere.material = materials["red light"];
  // }, []);

  useFrame((state) => {
    const t = state.clock.getElapsedTime();
    // const emissiveIntensity = (Math.pow(Math.abs(Math.sin(t)), 1.01))/(Math.sin(t)) * 25 + 25;
    const emissiveIntensity = t % 4 < 2 ? 0 : 15;
    materials["red light"].emissiveIntensity = emissiveIntensity;
  });

  return (
    <group position={[182.326, 245, -122.421]} scale={1.5}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.rooflight_stand.geometry}
        material={nodes.rooflight_stand.material}
        position={[0, 1.651, 0]}
        scale={0.095}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sphere.geometry}
        material={materials["red light"]}
        position={[-0.002, 2.566, 0]}
        scale={0.336}
      />
  </group>
  );
}

useGLTF.preload("/cityscape.glb");
